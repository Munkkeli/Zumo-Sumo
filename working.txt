/**
* @mainpage ZumoBot Project
* @brief    You can make your own ZumoBot with various sensors.
* @details  <br><br>
    <p>
    <B>General</B><br>
    You will use Pololu Zumo Shields for your robot project with CY8CKIT-059(PSoC 5LP) from Cypress semiconductor.This 
    library has basic methods of various sensors and communications so that you can make what you want with them. <br> 
    <br><br>
    </p>
    
    <p>
    <B>Sensors</B><br>
    &nbsp;Included: <br>
        &nbsp;&nbsp;&nbsp;&nbsp;LSM303D: Accelerometer & Magnetometer<br>
        &nbsp;&nbsp;&nbsp;&nbsp;L3GD20H: Gyroscope<br>
        &nbsp;&nbsp;&nbsp;&nbsp;Reflectance sensor<br>
        &nbsp;&nbsp;&nbsp;&nbsp;Motors
    &nbsp;Wii nunchuck<br>
    &nbsp;TSOP-2236: IR Receiver<br>
    &nbsp;HC-SR04: Ultrasonic sensor<br>
    &nbsp;APDS-9301: Ambient light sensor<br>
    &nbsp;IR LED <br><br><br>
    </p>
    
    <p>
    <B>Communication</B><br>
    I2C, UART, Serial<br>
    </p>
*/

#include <project.h>
#include <stdio.h>
#include "Motor.h"
#include "Ultra.h"
#include "Nunchuk.h"
#include "Reflectance.h"
#include "I2C_made.h"
#include "Gyro.h"
#include "Accel_magnet.h"
#include "IR.h"
#include "Ambient.h"
#include "Beep.h"

int rread(void);

/**
 * @file    main.c
 * @brief   
 * @details  ** You should enable global interrupt for operating properly. **<br>&nbsp;&nbsp;&nbsp;CyGlobalIntEnable;<br>
*/

float readBatteryVoltage();

//battery level//
int main()
{
    CyGlobalIntEnable; 
    UART_1_Start();
    ADC_Battery_Start();   
    
    sensor_isr_StartEx(sensor_isr_handler);
    reflectance_start();
    motor_start();
    IR_led_Write(1);
    
    struct sensors_ sensors;
    float volts = 0.0;
    int loopTime = 6000;
    int ledTime = 0;
    int ledState = 0;
    int buttonState = 1;
    int buttonValue = 0;
    float speed = 255;
    
    int white[4] = { 0, 0, 0, 0 };
    int black[4] = { 0, 0, 0, 0 };
    float status[4] = { 0, 0, 0, 0 };
    
    int lastLeft = 0;
    int lastRight = 0;
    
    int delay = 10;
    
    int state = 1;
    int start = 0;
    int stop = 0;
    int stopCount = 0;

    printf("\nBoot\n");

    //BatteryLed_Write(1); // Switch led on 
    BatteryLed_Write(0); // Switch led off 
    //uint8 button;
    //button = SW1_Read(); // read SW1 on pSoC board
    
    motor_forward(0, 10);

    for(;;)
    {
        if (loopTime >= 3000 * (delay / 100)) {
            volts = readBatteryVoltage();
            printf("Calculated voltage %f\r\n", volts);
            loopTime = 0;
        }
        
        if (volts <= 4) {
            if (ledTime >= 50) {
                ledState = !ledState;
                BatteryLed_Write(ledState);
                ledTime = 0;
            }
            
            continue;
        } else if (ledState == 1) {
            ledState = !ledState;
            BatteryLed_Write(ledState);
        }
        
        int button = SW1_Read();
        if (!button && buttonState) {
            buttonState = 0;
            buttonValue = 0; 
        } else {
            buttonValue = 1;
        }
        
        if (button && !buttonState) buttonState = 1;
        
        /*printf("State %d \n", button);
        
        if (buttonState != 0 && button == 0) {
            buttonValue = !buttonValue;
            buttonState = 0;
        } else if (buttonState == 0 && button == 1) {
            buttonState = 1;
        }*/
        
        switch (state) {
            case 1:
                if (ledTime >= 100 * (delay / 100)) {
                    ledState = !ledState;
                    BatteryLed_Write(ledState);
                    ledTime = 0;
                }
                
                if (buttonValue == 0) {
                    reflectance_read(&sensors);
                    white[0] = sensors.l3;
                    white[1] = sensors.l1;
                    white[2] = sensors.r1;
                    white[3] = sensors.r3;
                    
                    Beep(10, 100);
                    
                    state++;
                }
                
                break;
                
            case 2:
                if (ledTime >= 200 * (delay / 100)) {
                    ledState = !ledState;
                    BatteryLed_Write(ledState);
                    ledTime = 0;
                }
                
                if (buttonValue == 0) {
                    reflectance_read(&sensors);
                    black[0] = sensors.l3;
                    black[1] = sensors.l1;
                    black[2] = sensors.r1;
                    black[3] = sensors.r3;
                    
                    Beep(10, 200);
                    
                    state++;
                }
                
                break;
                
            case 3:
                printf("%d - %d - %d - %d \n", white[0], white[1], white[2], white[3]);
                printf("%d - %d - %d - %d \n", black[0], black[1], black[2], black[3]);
                
                Beep(20, 200);
                Beep(10, 100);
                
                state++;
                break;
                
            case 4:
                reflectance_read(&sensors);
                status[0] = (float)(sensors.l3 - white[0]) / (float)(black[0] - white[0]);
                status[1] = (float)(sensors.l1 - white[1]) / (float)(black[1] - white[1]);
                status[2] = (float)(sensors.r1 - white[2]) / (float)(black[2] - white[2]);
                status[3] = (float)(sensors.r3 - white[3]) / (float)(black[3] - white[3]);
                
                int left = 0;
                int right = 0;
                
                float over = 0.25;
                if (status[1] > over) {
                    right = 1;
                }
                
                if (status[0] > over) {
                    right = 2;
                }
                
                if (status[2] > over) {
                    left = 1;
                }
                
                if (status[3] > over) {
                    left = 2;
                }
                
                //printf("%d, %d", left, right);
                
                if ((lastLeft == 2 || lastRight == 2) && (left == 0 && right == 0)) {
                    left = lastLeft;
                    right = lastRight;
                }
          
                if (left == 0 && right == 0) {
                    left = 1;
                    right = 1;
                }
                
                if (left == 2 && right == 2) {
                    left = 1;
                    right = 1;
                }
                
                lastLeft = left;
                lastRight = right;
                
                float leftSpeed = left > 0 ? speed : 0;
                float rightSpeed = right > 0 ? speed : 0;
                
                if (left == 1 && right == 0) rightSpeed = 0.4 * speed;
                if (right == 1 && left == 0) leftSpeed = 0.4 * speed;
                if (left == 2) rightSpeed = 0;
                if (right == 2) leftSpeed = 0;
                
                if (status[0] > 0.9 && status[1] > 0.9 && status[2] > 0.9 && status[3] > 0.9 && stop == 0) {
                    stop = 1;
                } else if (status[0] > 0.1 && status[1] > 0.1 && status[2] > 0.1 && status[3] > 0.1 && stop == 1) {
                    stop = 0;
                    stopCount++;
                }
                
                if (stopCount == 2) {
                    leftSpeed = speed;
                    rightSpeed = speed;
                }
                
                printf("%d, %d \n", left, right);
                
                motor_turn(leftSpeed, rightSpeed, delay);
                
                if (buttonValue == 0) state++;
                if (stopCount > 1) state++;
                
                break;
                
            default:
                motor_forward(0, delay);
                if (buttonValue == 0) {
                    speed += 25;
                    state--;
                }
                break;
        }
        
        
        //reflectance_read(&sensors);
        //printf("%d - %d - %d - %d \n", sensors.l3, sensors.l1, sensors.r1, sensors.r3);

        // BatteryLed_Write(buttonValue);
        
        CyDelay(delay);
        ledTime++;
        loopTime++;
    }
 }   
//*/

float readBatteryVoltage()
{
    int16 adcresult = 0;
    ADC_Battery_StartConvert();
    if(ADC_Battery_IsEndConversion(ADC_Battery_WAIT_FOR_RESULT)) {
        adcresult = ADC_Battery_GetResult16();
        return ((float)adcresult / 4095) * 5 * 1.5;
    }
    return 0;
}

/*//ultra sonic sensor//
int main()
{
    CyGlobalIntEnable; 
    UART_1_Start();
    Ultra_Start();                          // Ultra Sonic Start function
    while(1) {
        //If you want to print out the value  
        printf("distance = %5.0f\r\n", Ultra_GetDistance());
        CyDelay(1000);
    }
}   
//*/


/*//nunchuk//
int main()
{
    CyGlobalIntEnable; 
    UART_1_Start();
  
    nunchuk_start();
    nunchuk_init();
    
    for(;;)
    {    
        nunchuk_read();
    }
}   
//*/


/*//IR receiver//
int main()
{
    CyGlobalIntEnable; 
    UART_1_Start();
    
    unsigned int IR_val; 
    
    for(;;)
    {
       IR_val = get_IR();
       printf("%x\r\n\n",IR_val);
    }    
 }   
//*/


/*//Ambient light sensor//
int main()
{
    CyGlobalIntEnable; 
    UART_1_Start();
    
    I2C_Start();
    
    I2C_write(0x29,0x80,0x00);          // set to power down
    I2C_write(0x29,0x80,0x03);          // set to power on
    
    for(;;)
    {    
        uint8 Data0Low,Data0High,Data1Low,Data1High;
        Data0Low = I2C_read(0x29,CH0_L);
        Data0High = I2C_read(0x29,CH0_H);
        Data1Low = I2C_read(0x29,CH1_L);
        Data1High = I2C_read(0x29,CH1_H);
        
        uint8 CH0, CH1;
        CH0 = convert_raw(Data0Low,Data0High);      // combine Data0
        CH1 = convert_raw(Data1Low,Data1High);      // combine Data1

        double Ch0 = CH0;
        double Ch1 = CH1;
        
        double data = 0;
        data = getLux(Ch0,Ch1);
        
        // If you want to print out data
        //printf("%lf\r\n",data);    
    }    
 }   
//*/


/*//accelerometer//
int main()
{
    CyGlobalIntEnable; 
    UART_1_Start();
  
    I2C_Start();
  
    uint8 X_L_A, X_H_A, Y_L_A, Y_H_A, Z_L_A, Z_H_A;
    int16 X_AXIS_A, Y_AXIS_A, Z_AXIS_A;
    
    I2C_write(ACCEL_MAG_ADDR, ACCEL_CTRL1_REG, 0x37);           // set accelerometer & magnetometer into active mode
    I2C_write(ACCEL_MAG_ADDR, ACCEL_CTRL7_REG, 0x22);
    
    
    for(;;)
    {
        //print out accelerometer output
        X_L_A = I2C_read(ACCEL_MAG_ADDR, OUT_X_L_A);
        X_H_A = I2C_read(ACCEL_MAG_ADDR, OUT_X_H_A);
        X_AXIS_A = convert_raw(X_L_A, X_H_A);
        
        Y_L_A = I2C_read(ACCEL_MAG_ADDR, OUT_Y_L_A);
        Y_H_A = I2C_read(ACCEL_MAG_ADDR, OUT_Y_H_A);
        Y_AXIS_A = convert_raw(Y_L_A, Y_H_A);
        
        Z_L_A = I2C_read(ACCEL_MAG_ADDR, OUT_Z_L_A);
        Z_H_A = I2C_read(ACCEL_MAG_ADDR, OUT_Z_H_A);
        Z_AXIS_A = convert_raw(Z_L_A, Z_H_A);
        
        printf("ACCEL: %d %d %d %d %d %d \r\n", X_L_A, X_H_A, Y_L_A, Y_H_A, Z_L_A, Z_H_A);
        value_convert_accel(X_AXIS_A, Y_AXIS_A, Z_AXIS_A);
        printf("\n");
        
        CyDelay(50);
    }
}   
//*/


/*//reflectance//
int main()
{
    struct sensors_ ref;
    struct sensors_ dig;
    CyGlobalIntEnable; 
    UART_1_Start();
  
    sensor_isr_StartEx(sensor_isr_handler);
    
    reflectance_start();

    IR_led_Write(1);
    for(;;)
    {
        reflectance_read(&ref);
        printf("%d %d %d %d \r\n", ref.l3, ref.l1, ref.r1, ref.r3);       //print out each period of reflectance sensors
        reflectance_digital(&dig);      //print out 0 or 1 according to results of reflectance period
        printf("%d %d %d %d \r\n", dig.l3, dig.l1, dig.r1, dig.r3);        //print out 0 or 1 according to results of reflectance period
        
        CyDelay(500);
    }
}   
//*/

 /* //motor//
int main()
{
    CyGlobalIntEnable; 
    UART_1_Start();

    motor_start();              // motor start

    motor_forward(100,2000);     // moving forward
    motor_turn(200,50,2000);     // turn
    motor_turn(50,200,2000);     // turn
    motor_backward(100,2000);    // movinb backward
       
    motor_stop();               // motor stop
    
    for(;;)
    {

    }
}
//*/
    

/*//gyroscope//
int main()
{
    CyGlobalIntEnable; 
    UART_1_Start();
  
    I2C_Start();
  
    uint8 X_L_G, X_H_G, Y_L_G, Y_H_G, Z_L_G, Z_H_G;
    int16 X_AXIS_G, Y_AXIS_G, Z_AXIS_G;
    
    I2C_write(GYRO_ADDR, GYRO_CTRL1_REG, 0x0F);             // set gyroscope into active mode
    I2C_write(GYRO_ADDR, GYRO_CTRL4_REG, 0x30);             // set full scale selection to 2000dps    
    
    for(;;)
    {
        //print out gyroscope output
        X_L_G = I2C_read(GYRO_ADDR, OUT_X_AXIS_L);
        X_H_G = I2C_read(GYRO_ADDR, OUT_X_AXIS_H);
        X_AXIS_G = convert_raw(X_H_G, X_L_G);
        
        
        Y_L_G = I2C_read(GYRO_ADDR, OUT_Y_AXIS_L);
        Y_H_G = I2C_read(GYRO_ADDR, OUT_Y_AXIS_H);
        Y_AXIS_G = convert_raw(Y_H_G, Y_L_G);
        
        
        Z_L_G = I2C_read(GYRO_ADDR, OUT_Z_AXIS_L);
        Z_H_G = I2C_read(GYRO_ADDR, OUT_Z_AXIS_H);
        Z_AXIS_G = convert_raw(Z_H_G, Z_L_G);
     
        // If you want to print value
        printf("%d %d %d \r\n", X_AXIS_G, Y_AXIS_G, Z_AXIS_G);
        CyDelay(50);
    }
}   
//*/


/*//magnetometer//
int main()
{
    CyGlobalIntEnable; 
    UART_1_Start();
  
    I2C_Start();
   
    uint8 X_L_M, X_H_M, Y_L_M, Y_H_M, Z_L_M, Z_H_M;
    int16 X_AXIS, Y_AXIS, Z_AXIS;
    
    I2C_write(GYRO_ADDR, GYRO_CTRL1_REG, 0x0F);             // set gyroscope into active mode
    I2C_write(GYRO_ADDR, GYRO_CTRL4_REG, 0x30);             // set full scale selection to 2000dps
    I2C_write(ACCEL_MAG_ADDR, ACCEL_CTRL1_REG, 0x37);           // set accelerometer & magnetometer into active mode
    I2C_write(ACCEL_MAG_ADDR, ACCEL_CTRL7_REG, 0x22);
    
    
    for(;;)
    {
        X_L_M = I2C_read(ACCEL_MAG_ADDR, OUT_X_L_M);
        X_H_M = I2C_read(ACCEL_MAG_ADDR, OUT_X_H_M);
        X_AXIS = convert_raw(X_L_M, X_H_M);
        
        Y_L_M = I2C_read(ACCEL_MAG_ADDR, OUT_Y_L_M);
        Y_H_M = I2C_read(ACCEL_MAG_ADDR, OUT_Y_H_M);
        Y_AXIS = convert_raw(Y_L_M, Y_H_M);
        
        Z_L_M = I2C_read(ACCEL_MAG_ADDR, OUT_Z_L_M);
        Z_H_M = I2C_read(ACCEL_MAG_ADDR, OUT_Z_H_M);
        Z_AXIS = convert_raw(Z_L_M, Z_H_M);
        
        heading(X_AXIS, Y_AXIS);
        printf("MAGNET: %d %d %d %d %d %d \r\n", X_L_M, X_H_M, Y_L_M, Y_H_M, Z_L_M, Z_H_M);
        printf("%d %d %d \r\n", X_AXIS,Y_AXIS, Z_AXIS);
        CyDelay(50);      
    }
}   
//*/


#if 0
int rread(void)
{
    SC0_SetDriveMode(PIN_DM_STRONG);
    SC0_Write(1);
    CyDelayUs(10);
    SC0_SetDriveMode(PIN_DM_DIG_HIZ);
    Timer_1_Start();
    uint16_t start = Timer_1_ReadCounter();
    uint16_t end = 0;
    while(!(Timer_1_ReadStatusRegister() & Timer_1_STATUS_TC)) {
        if(SC0_Read() == 0 && end == 0) {
            end = Timer_1_ReadCounter();
        }
    }
    Timer_1_Stop();
    
    return (start - end);
}
#endif

/* Don't remove the functions below */
int _write(int file, char *ptr, int len)
{
    (void)file; /* Parameter is not used, suppress unused argument warning */
	int n;
	for(n = 0; n < len; n++) {
        if(*ptr == '\n') UART_1_PutChar('\r');
		UART_1_PutChar(*ptr++);
	}
	return len;
}

int _read (int file, char *ptr, int count)
{
    int chs = 0;
    char ch;
 
    (void)file; /* Parameter is not used, suppress unused argument warning */
    while(count > 0) {
        ch = UART_1_GetChar();
        if(ch != 0) {
            UART_1_PutChar(ch);
            chs++;
            if(ch == '\r') {
                ch = '\n';
                UART_1_PutChar(ch);
            }
            *ptr++ = ch;
            count--;
            if(ch == '\n') break;
        }
    }
    return chs;
}
/* [] END OF FILE */
